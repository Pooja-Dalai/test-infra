postsubmits:
  ppc64le-cloud/builds:
    - name: postsubmit-os-kubernetes-build-golang-master-ppc64le
      cluster: k8s-ppc64le-cluster
      labels:
        preset-golang-build: "true"
      decorate: true
      branches:
        - master
      run_if_changed: '^golang/master/'
      extra_refs:
        - base_ref: master
          org: openshift
          repo: kubernetes
          workdir: true
      spec:
        containers:
          - image: quay.io/powercloud/all-in-one:0.7
            resources:
              requests:
                cpu: "3000m"
              limits:
                cpu: "3000m"
            command:
              - /bin/bash
            args:
              - -c
              - |
                set -o errexit
                set -o nounset
                set -o pipefail
                set -o xtrace

                build_commit=$(jq -r .commit $GOPATH/src/github.com/ppc64le-cloud/builds/golang/master/build.yaml)
                build_project=$(jq -r .project $GOPATH/src/github.com/ppc64le-cloud/builds/golang/master/build.yaml)
                curl -X GET http://build-bot.prow:8090/build\?project\=$build_project\&commit\=$build_commit -o /tmp/golang.tar.gz
                rm -rf /usr/local/go
                tar -C /usr/local -xzf /tmp/golang.tar.gz
                # Storing go version of environment
                go_version_env=`go version | cut -d ' ' -f4`
                # go version of development master go will be of the kind "go version devel go1.21-39c5070712 Thu Jul 6 23:23:41 2023 +0000 linux/ppc64le"
                # hence the cut at f4 will store go1.21-39c5070712 to go_version_env variable
                echo "The Go version of environment is $go_version_env"

                export FORCE_HOST_GO=y
                KUBE_BUILD_PLATFORMS=linux/ppc64le make cross

                # Check golang used for binary building
                go_version_bin=`go version _output/bin/kube-apiserver | cut -d ' ' -f3`
                [[ "$go_version_env" == "$go_version_bin" ]] || { echo "The binary was not built with master go version"; exit 1; }
                echo "The binaries are built with go version $go_version_bin"

                for server in kubectl kube-apiserver kube-controller-manager kube-scheduler kubelet kube-proxy kubeadm
                do
                    echo $server
                    _output/bin/$server --help
                done
    - name: postsubmit-os-origin-build-golang-master-ppc64le
      cluster: k8s-ppc64le-cluster
      labels:
        preset-golang-build: "true"
      decorate: true
      branches:
        - master
      run_if_changed: '^golang/master/'
      extra_refs:
        - base_ref: main
          org: openshift
          repo: origin
          workdir: true
      spec:
        containers:
          - image: quay.io/powercloud/all-in-one:0.7
            resources:
              requests:
                cpu: "2500m"
              limits:
                cpu: "2500m"
            command:
              - /bin/bash
            args:
              - -c
              - |
                set -o errexit
                set -o nounset
                set -o pipefail
                set -o xtrace

                build_commit=$(jq -r .commit $GOPATH/src/github.com/ppc64le-cloud/builds/golang/master/build.yaml)
                build_project=$(jq -r .project $GOPATH/src/github.com/ppc64le-cloud/builds/golang/master/build.yaml)
                curl -X GET http://build-bot.prow:8090/build\?project\=$build_project\&commit\=$build_commit -o /tmp/golang.tar.gz
                rm -rf /usr/local/go
                tar -C /usr/local -xzf /tmp/golang.tar.gz
                export OPENSHIFT_SKIP_EXTERNAL_TESTS=true
                make GO_REQUIRED_MIN_VERSION:= WHAT=cmd/openshift-tests
                cp ./openshift-tests /usr/local/bin
                openshift-tests help
                openshift-tests images --to-repository=quay.io/powercloud/community-e2e-images
                # Commenting dry-run until https://github.com/openshift/origin/issues/28681 is addressed
                # openshift-tests run kubernetes/conformance --dry-run
