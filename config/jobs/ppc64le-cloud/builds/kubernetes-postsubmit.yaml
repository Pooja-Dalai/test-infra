postsubmits:
  ppc64le-cloud/builds:
    - name: postsubmit-kubernetes-build-golang-master-ppc64le
      cluster: k8s-ppc64le-cluster
      labels:
        preset-golang-build: "true"
      decorate: true
      branches:
        - master
      run_if_changed: '^golang/master/'
      extra_refs:
        - base_ref: master
          org: kubernetes
          repo: kubernetes
          workdir: true
      spec:
        containers:
          - image: quay.io/powercloud/all-in-one:0.7
            resources:
              requests:
                cpu: "3000m"
              limits:
                cpu: "3000m"
            command:
              - /bin/bash
            args:
              - -c
              - |
                set -o errexit
                set -o nounset
                set -o pipefail
                set -o xtrace

                build_commit=$(jq -r .commit $GOPATH/src/github.com/ppc64le-cloud/builds/golang/master/build.yaml)
                build_project=$(jq -r .project $GOPATH/src/github.com/ppc64le-cloud/builds/golang/master/build.yaml)
                curl -X GET http://build-bot.prow:8090/build\?project\=$build_project\&commit\=$build_commit -o /tmp/golang.tar.gz
                rm -rf /usr/local/go
                tar -C /usr/local -xzf /tmp/golang.tar.gz
                # Storing go version of environment
                go_version_env=`go version | cut -d ' ' -f4`
                # go version of development master go will be of the kind "go version devel go1.21-39c5070712 Thu Jul 6 23:23:41 2023 +0000 linux/ppc64le"
                # hence the cut at f4 will store go1.21-39c5070712 to go_version_env variable
                echo "The Go version of environment is $go_version_env"

                export CGO_ENABLED=0
                export FORCE_HOST_GO=y
                KUBE_BUILD_PLATFORMS=linux/ppc64le make cross

                # Check golang used for binary building
                go_version_bin=`go version _output/bin/kube-apiserver | cut -d ' ' -f3`
                [[ "$go_version_env" == "$go_version_bin" ]] || { echo "The binary was not built with master go version"; exit 1; }
                echo "The binaries are built with go version $go_version_bin"

                GITCOMMIT=$(git rev-parse --short HEAD)
                mkdir -p _output/release-stage/kubernetes/{client,test,server}/bin

                cp _output/bin/kubectl _output/release-stage/kubernetes/client/bin/
                mv _output/bin/{apiextensions-apiserver,kube-aggregator,kube-apiserver,kube-controller-manager,kube-proxy,kube-scheduler,kubeadm,kubectl,kubelet} _output/release-stage/kubernetes/server/bin
                mv _output/bin/{go-runner,e2e_node.test,kubemark,ginkgo,e2e.test} _output/release-stage/kubernetes/test/bin/

                tar -zcvf kubernetes-test-linux-`go env GOARCH`.tar.gz --directory=_output/release-stage/ kubernetes/test/bin
                tar -zcvf kubernetes-client-linux-`go env GOARCH`.tar.gz --directory=_output/release-stage/ kubernetes/client/bin
                tar -zcvf kubernetes-server-linux-`go env GOARCH`.tar.gz --directory=_output/release-stage/ kubernetes/server/bin

                curl -v -X POST http://build-bot.prow:8090/build -H 'Content-Type: multipart/form-data' -F file1=@kubernetes-test-linux-`go env GOARCH`.tar.gz -F file2=@kubernetes-client-linux-`go env GOARCH`.tar.gz -F file3=@kubernetes-server-linux-`go env GOARCH`.tar.gz -F source=github.com/kubernetes/kubernetes.git -F commit=$GITCOMMIT -F project=kubernetes/master/golang/master
    - name: postsubmit-master-golang-kubernetes-unit-test-ppc64le
      cluster: k8s-ppc64le-cluster
      labels:
        preset-golang-build: "true"
      decorate: true
      decoration_config:
        gcs_configuration:
          bucket: ppc64le-kubernetes
          path_strategy: explicit
        gcs_credentials_secret: gcs-credentials
      branches:
        - master
      run_if_changed: '^golang/master/'
      extra_refs:
        - base_ref: master
          org: kubernetes
          repo: kubernetes
          workdir: true
      spec:
        containers:
          - image: quay.io/powercloud/all-in-one:0.7
            resources:
              requests:
                cpu: "5000m"
              limits:
                cpu: "5000m"
            command:
              - /bin/bash
            args:
              - -c
              - |
                set -o errexit
                set -o nounset
                set -o pipefail
                set -o xtrace

                export KUBE_TIMEOUT='--timeout=600s'
                export KUBE_COVER="n"
                export KUBE_KEEP_VERBOSE_TEST_OUTPUT=y
                export LOG_LEVEL=4

                build_commit=$(jq -r .commit $GOPATH/src/github.com/ppc64le-cloud/builds/golang/master/build.yaml)
                build_project=$(jq -r .project $GOPATH/src/github.com/ppc64le-cloud/builds/golang/master/build.yaml)
                curl -X GET http://build-bot.prow:8090/build\?project\=$build_project\&commit\=$build_commit -o /tmp/golang.tar.gz
                rm -rf /usr/local/go
                tar -C /usr/local -xzf /tmp/golang.tar.gz
                # Storing go version of environment
                go_version_env=`go version | cut -d ' ' -f3`
                # go version of development master go will be of the kind "go version devel go1.21-39c5070712 Thu Jul 6 23:23:41 2023 +0000 linux/ppc64le"
                # hence the cut at f4 will store go1.21-39c5070712 to go_version_env variable
                echo "The Go version of environment is $go_version_env"

                go version
                go env

                pushd ./hack/tools
                GO111MODULE=on go install gotest.tools/gotestsum
                popd

                export FORCE_HOST_GO=y
                make test
    - name: postsubmit-master-golang-kubernetes-conformance-test-ppc64le
      cluster: k8s-ppc64le-cluster
      labels:
        preset-ssh-bot: "true"
      decorate: true
      branches:
        - master
      run_if_changed: '^kubernetes/master/golang/master/'
      extra_refs:
        - base_ref: main
          org: kubernetes-sigs
          repo: provider-ibmcloud-test-infra
        - base_ref: master
          org: kubernetes-sigs
          repo: kubetest2
          workdir: true
      spec:
        containers:
          - image: quay.io/powercloud/all-in-one:0.7
            resources:
              requests:
                cpu: "4000m"
              limits:
                cpu: "4000m"
            command:
              - /bin/bash
            args:
              - -c
              - |
                set -o errexit
                set -o nounset
                set -o pipefail
                set -o xtrace
                export PATH=$GOPATH/bin:$PATH
                export GO111MODULE=on
                go version
                go env

                make install
                make install-tester-exec

                pushd ../provider-ibmcloud-test-infra
                make install-deployer-tf
                popd


                TIMESTAMP=$(date +%s)

                # Details of IBM S3 storage
                S3_SERVER=s3.us-south.cloud-object-storage.appdomain.cloud
                BUCKET=ppc64le-ci-builds
                DIRECTORY=kubernetes/master/golang/master
                build_commit=$(jq -r .commit $GOPATH/src/github.com/ppc64le-cloud/builds/kubernetes/master/golang/master/build.yaml)

                K8S_BUILD_VERSION=$build_commit
                # e2e.test binary needed for running tests using k8s tests bits from IBM s3 storage
                URL=https://$S3_SERVER/$BUCKET/$DIRECTORY/$K8S_BUILD_VERSION
                wget -qO- $URL/kubernetes-test-linux-ppc64le.tar.gz | tar xz -C /usr/local/bin --strip-components=3
                # kubectl needed for the e2e tests
                wget -qO- $URL/kubernetes-client-linux-ppc64le.tar.gz | tar xz -C /usr/local/bin --strip-components=3

                set +o errexit
                kubetest2 tf --powervs-dns k8s-tests \
                    --powervs-image-name CentOS-Stream-9 \
                    --powervs-region syd --powervs-zone syd05 \
                    --powervs-service-id c3f5354a-517e-4927-8523-890c4bf3d6c5 \
                    --powervs-ssh-key powercloud-bot-key \
                    --ssh-private-key /etc/secret-volume/ssh-privatekey \
                    --build-version $K8S_BUILD_VERSION \
                    --s3-server $S3_SERVER --bucket $BUCKET  --directory $DIRECTORY \
                    --cluster-name config2-$TIMESTAMP \
                    --workers-count 2 \
                    --up --auto-approve --retry-on-tf-failure 3 \
                    --break-kubetest-on-upfail true \
                    --powervs-memory 32 \
                    --test=exec -- /usr/local/bin/ginkgo --nodes=10 /usr/local/bin/e2e.test \
                    -- --ginkgo.focus='\[Conformance\]' \
                    --ginkgo.skip='\[Serial\]' \
                    --ginkgo.flakeAttempts=2 \
                    --report-dir=$ARTIFACTS \
                    --kubeconfig="$(pwd)/config2-$TIMESTAMP/kubeconfig"; rc1=$?
                export ARTIFACTS=$ARTIFACTS/serial_tests_artifacts
                kubetest2 tf --powervs-region syd --powervs-zone syd05 \
                    --powervs-service-id c3f5354a-517e-4927-8523-890c4bf3d6c5 \
                    --ignore-cluster-dir true \
                    --cluster-name config2-$TIMESTAMP \
                    --down --auto-approve --ignore-destroy-errors \
                    --test=exec -- /usr/local/bin/ginkgo /usr/local/bin/e2e.test \
                    -- --ginkgo.focus='\[Serial\].*\[Conformance\]' \
                    --ginkgo.flakeAttempts=2 \
                    --report-dir=$ARTIFACTS \
                    --kubeconfig="$(pwd)/config2-$TIMESTAMP/kubeconfig"; rc2=$?
                if [ $rc1 != 0 ]; then
                    echo "ERROR: Non Serial k8s Conformance tests exited with code: $rc1"
                    exit $rc1
                elif [ $rc2 != 0 ]; then
                    echo "ERROR: Serial k8s Conformance tests exited with code: $rc2"
                    exit $rc2
                fi
